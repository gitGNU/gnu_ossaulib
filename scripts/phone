#! /usr/bin/guile -s
!#

;;;;
;;;; 	Copyright (C) 2012 Neil Jerram.
;;;; 
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU General Public License as
;;;; published by the Free Software Foundation; either version 3 of
;;;; the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
;;;; 02110-1301 USA

;; Phone application, for receiving incoming and making outgoing
;; calls, using Edje for the UI and oFono for the phone hardware
;; handling.

;; To do:
;;
;; Investigate/fix GVariant reference counting behaviour.
;;
;; Add (default) ringtone.
;;
;; Add in-call audio routing calls.  (Link to PulseAudio?)
;;
;; Add PIM.  (EDS?)
;;
;; Make number field scale automatically when it needs to.

(cond-expand (guile-2)
	     (else (error "\
This \"phone\" application requires Guile 2.0; it cannot run under Guile 1.x.")))

(add-to-load-path (dirname (dirname (current-filename))))

(use-modules (ofono call)
	     (e17 phone)
	     (ice-9 receive)
	     (ice-9 popen)
	     (e17 edje)
	     (ossau trc)
	     (ice-9 rdelim)
	     (ofono modem)
	     (ofono registration))

;; Call state: 'none, 'outgoing, 'incoming or 'active.
(define call-state 'none)

;; Number being dialled.
(define dialled-number "")

;; Mapping from dialer button names to corresponding digits.
(define dial-button-map '(("star" . "*")
			  ("one" . "1")
			  ("two" . "2")
			  ("three" . "3")
			  ("four" . "4")
			  ("five" . "5")
			  ("six" . "6")
			  ("seven" . "7")
			  ("eight" . "8")
			  ("nine" . "9")
			  ("zero" . "0")
			  ("hash" . "#")))

(define send-dtmf-digit #f)
(define hang-up-or-reject #f)
(define accept-incoming #f)
(define voice-routing-pipe #f)

(define (establish-call make-active-call)
  (receive (to-hang-up to-send-dtmf-digit)
      (make-active-call (lambda ()
			  (set-call-state! 'none))
			noop)
    (set! hang-up-or-reject to-hang-up)
    (set! send-dtmf-digit to-send-dtmf-digit)
    (set-call-state! 'active)))

(define (ui-button-pressed group name)
  (case group
    ((dialer)
     (case call-state
       ((none)
	(set! dialled-number
	      (string-append dialled-number
			     (assoc-ref dial-button-map name)))
	(show-current-call dialled-number #f #f)
	(enable-buttons 'call)
	(enable-buttons 'delete))
       ((active)
	(send-dtmf-digit (assoc-ref dial-button-map name)))))
    ((call)
     (case call-state
       ((none)
	(set! hang-up-or-reject (dial dialled-number
				      establish-call
				      (lambda (reason)
					(set-call-state! 'none))))
	(set-call-state! 'outgoing))
       ((incoming)
	(establish-call accept-incoming))))
    ((hangup)
     (case call-state
       ((outgoing incoming active)
	(hang-up-or-reject))))
    ((delete)
     (case call-state
       ((none)
	(let ((dialled-number-length (string-length dialled-number)))
	  (if (> dialled-number-length 0)
	      (begin
		(set! dialled-number (substring dialled-number
						0
						(- dialled-number-length 1)))
		(show-current-call dialled-number #f #f)
		(if (string=? dialled-number "")
		    (begin
		      (disable-buttons 'call)
		      (disable-buttons 'delete)))))))))))

(define (start-voice-routing)
  (or voice-routing-pipe
      (begin
	(set! voice-routing-pipe
	      (open-input-pipe "/root/gta04-gsm-voice-routing/gsm-voice-routing 2>&1"))
	(ecore-watch-fd (fileno voice-routing-pipe)
			(lambda ()
			  (trc 'voice-routing (read-line voice-routing-pipe 'trim)))))))

(define (stop-voice-routing)
  (if voice-routing-pipe
      (begin
	(ecore-unwatch-fd (fileno voice-routing-pipe))
	(close-pipe voice-routing-pipe)
	(set! voice-routing-pipe #f))))

(define (set-call-state! new-call-state)
  (set! call-state new-call-state)
  (case call-state
    ((none)
     (stop-voice-routing)
     (enable-buttons 'dialer)
     (disable-buttons 'call)
     (disable-buttons 'delete)
     (disable-buttons 'hangup)
     (disable-buttons 'speaker)
     (clear-current-call)
     (show-call-state registration)
     (set! dialled-number "")
     (set! send-dtmf-digit #f)
     (set! hang-up-or-reject #f)
     (set! accept-incoming #f)
     (gc))
    ((incoming)
     (disable-buttons 'dialer)
     (enable-buttons 'call)
     (disable-buttons 'delete)
     (enable-buttons 'hangup)
     (show-call-state "Incoming Call..."))
    ((outgoing)
     (disable-buttons 'dialer)
     (disable-buttons 'call)
     (disable-buttons 'delete)
     (enable-buttons 'hangup)
     (show-call-state "Dialling...")
     (start-voice-routing))
    ((active)
     (enable-buttons 'dialer)
     (disable-buttons 'call)
     (enable-buttons 'hangup)
     (enable-buttons 'speaker)
     (show-call-state "Active Call")
     (start-voice-routing))))

(define registration "No registration")

(define (main)
  ;; Define handling for incoming calls.
  (set-incoming-call-proc (lambda (number make-active-call reject)
			    (case call-state
			      ((none)
			       (show-current-call number #f #f)
			       (set! hang-up-or-reject reject)
			       (set! accept-incoming make-active-call)
			       (set-call-state! 'incoming)
			       (lambda ()
				 (set-call-state! 'none)))
			      (else
			       (reject)))))
  ;; Create and show the phone UI.
  (create-show-phone-ui ui-button-pressed)
  (set-call-state! 'none)
  ;; Define handling for registration state.
  (add-registration-hook (lambda (state props)
			   (set! registration
				 (case state
				   ((none) "No modem")
				   ((unregistered) "Unregistered")
				   (else 
				    (format #f "~a ~a ~a%"
					    (assoc-ref props "Name")
					    (assoc-ref props "Technology")
					    (assoc-ref props "Strength")))))
			   (if (eq? call-state 'none)
			       (show-call-state registration))))
  (connect-to-ofono)
  (run-ui-loop))

(display "=== logread | grep invalid ===\n")
(force-output)
(system "logread | grep invalid")
(display "=== logread | grep invalid ===\n")

(main)
