#! /usr/bin/guile -s
!#

;; Phone application, for receiving incoming and making outgoing
;; calls, using Edje for the UI and oFono for the phone hardware
;; handling.

(cond-expand (guile-2)
	     (else (error "\
This \"phone\" application requires Guile 2.0; it cannot run under Guile 1.x.")))

(add-to-load-path (dirname (dirname (current-filename))))

(use-modules (ofono call)
	     (e17 phone)
	     (ice-9 receive))

;; Call state: 'none, 'outgoing, 'incoming or 'active.
(define call-state 'none)

;; Number being dialled.
(define dialled-number "")

;; Mapping from dialer button names to corresponding digits.
(define dial-button-map '(("star" . "*")
			  ("one" . "1")
			  ("two" . "2")
			  ("three" . "3")
			  ("four" . "4")
			  ("five" . "5")
			  ("six" . "6")
			  ("seven" . "7")
			  ("eight" . "8")
			  ("nine" . "9")
			  ("zero" . "0")
			  ("hash" . "#")))

(define send-dtmf-digit #f)
(define hang-up-or-reject #f)
(define accept-incoming #f)

(define (establish-call make-active-call)
  (receive (to-hang-up to-send-dtmf-digit)
      (make-active-call (lambda ()
			  (set-call-state! 'none))
			noop)
    (set! hang-up-or-reject to-hang-up)
    (set! send-dtmf-digit to-send-dtmf-digit)
    (set-call-state! 'active)))

(define (ui-button-pressed group name)
  (case group
    ((dialer)
     (case call-state
       ((none)
	(set! dialled-number
	      (string-append dialled-number
			     (assoc-ref dial-button-map name)))
	(show-current-call dialled-number #f #f)
	(enable-buttons 'call))
       ((active)
	(send-dtmf-digit (assoc-ref dial-button-map name)))))
    ((call)
     (case call-state
       ((none)
	(set! hang-up-or-reject (dial dialled-number
				      establish-call
				      (lambda (reason)
					(set-call-state! 'none))))
	(set-call-state! 'outgoing))
       ((incoming)
	(establish-call accept-incoming))))
    ((hangup)
     (case call-state
       ((outgoing incoming active)
	(hang-up-or-reject))))))

(define (set-call-state! new-call-state)
  (set! call-state new-call-state)
  (case call-state
    ((none)
     (enable-buttons 'dialer)
     (disable-buttons 'call)
     (disable-buttons 'hangup)
     (disable-buttons 'speaker)
     (clear-current-call)
     (set! dialled-number ""))
    ((incoming)
     (disable-buttons 'dialer)
     (enable-buttons 'call)
     (enable-buttons 'hangup))
    ((outgoing)
     (disable-buttons 'dialer)
     (disable-buttons 'call)
     (enable-buttons 'hangup))
    ((active)
     (enable-buttons 'dialer)
     (disable-buttons 'call)
     (enable-buttons 'hangup)
     (enable-buttons 'speaker))))

(define (main)
  ;; Define handling for incoming calls.
  (set-incoming-call-proc (lambda (make-active-call reject)
			    (case call-state
			      ((none)
			       (show-current-call "Incoming..." #f #f)
			       (set! hang-up-or-reject reject)
			       (set! accept-incoming make-active-call)
			       (set-call-state! 'incoming)
			       (lambda ()
				 (set-call-state! 'none)))
			      (else
			       (reject)))))
  ;; Create and show the phone UI.
  (create-show-phone-ui ui-button-pressed)
  (set-call-state! 'none)
  (run-ui-loop))

(main)
