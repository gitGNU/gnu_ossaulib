#!/usr/bin/env guile

Contacts - top level executable guile -*- scheme -*- script

!#

;(turn-on-debugging)

(use-modules (ice-9 regex))

(eval-when (load compile)
  (let* ((bindir (dirname (car (command-line))))
	 (absdir (cond ((string=? bindir ".")
			(getcwd))
		       ((string-match "^/" bindir)
			bindir)
		       (else (in-vicinity (getcwd) bindir)))))
    (set! %load-path (cons absdir %load-path))))

(use-modules (ossau utils)
	     (ossau contacts common)
	     (ossau contacts bbdb)
	     (ossau contacts google)
	     (ossau contacts git))

;; Main program: dispatch to command table.
(define (main . args)
  (if (null? args)
      (usage-error "You need to give a command argument, such as `from'."))
  (let* ((command (car args))
	 (command-proc (and=> (assoc command command-table) cadr)))
    (if command-proc
	(command-proc (cdr args))
	(usage-error "`~a' is not a recognized command." command))))

;; Report a usage error.
(define (usage-error msg . args)
  (let (;;(possible-commands
	;; (substring (apply string-append
	;;		   (map (lambda (command-entry)
	;;			  (string-append " | " (car command-entry)))
	;;			command-table))
	;;	    3))
	(details (apply string-append
			(map (lambda (command-entry)
			       (string-append "\t"
					      (car (command-line))
					      " "
					      (car command-entry)
					      " "
					      (caddr command-entry)
					      "\n"))
			     command-table))))
    (newline)
    (error (apply format #f
		  (string-append msg
				 "\n\n"
				 ;;"Usage: " (car (command-line))
				 ;;" (" possible-commands ") ...\n"
				 "Possible invocations are:\n"
				 details)
		  args))))

;; Import contacts from some native source.
(define (do-from args)

  ;; We need two arguments: a branch name and a source name (usually a
  ;; file or directory name) to import from.
  (or (= (length args) 2)
      (usage-error "The `from' command needs 2 arguments:
- a branch name
- and a file (or directory) name to import from. ~s" args))
  (let ((branch (car args))
	(source (cadr args)))

    ;; FIXME: BBDB assumption.
    (import->git <bbdb> source branch)))

(define (do-to args)
  ;; We need 2 arguments, a branch name and a file (or directory) name
  ;; to export to.
  (or (= (length args) 2)
      (usage-error "The `to' command needs 2 arguments:
- a branch name
- and a file (or directory) name to export to. ~s" args))
  (let ((branch (car args))
	(target (cadr args)))

    ;; FIXME: BBDB assumption.
    (git->export branch <bbdb> target)))

(define command-table `(("from" ,do-from "<branch> <file-or-dir>")
			("to" ,do-to "<branch> <file-or-dir>")))


;; Invoke `main'.
(apply main (cdr (command-line)))
